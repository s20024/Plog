---
import 'github-markdown-css/github-markdown-light.css';
import type { CollectionEntry } from 'astro:content';
import Layout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { render } from 'astro:content';
import Profile from '../../components/Profile.astro';

export async function getStaticPaths() {
  const memos = await getCollection('memo');
  return memos.map((memo) => ({
    params: { slug: memo.id },
    props: memo,
  }));
}
type Props = CollectionEntry<'memo'>;

const memo = Astro.props;
const { Content } = await render(memo);
---

<Layout title={`${memo.data.title}`}>
  <div class="container">
    <article class="post-container">
      <header class="post-header">
        <h1 class="post-title">{memo.data.title}</h1>
        <div class="post-meta">
          <time class="post-date">
            {
              new Date(memo.data.pubDate).toLocaleDateString('ja-JP', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })
            }
          </time>
          <div class="post-tags">
            {
              memo.data.tags.map((tag: string) => (
                <a href={`/tag/${tag.toLowerCase()}`} class="tag">
                  {tag}
                </a>
              ))
            }
          </div>
        </div>
      </header>

      <div class="post-content markdown-body" data-color-mode="light" data-light-theme="light">
        <Content />
      </div>

      <footer class="post-footer">
        <Profile />
      </footer>
    </article>
  </div>
</Layout>

<style lang="scss">
  .post-container {
    max-width: 800px;
    margin: 0 auto;
    background-color: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
  }

  .post-header {
    padding: 2rem 2rem 1.5rem;
    text-align: center;
    border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  }

  .post-category {
    display: inline-block;
    background-color: var(--base-color);
    color: var(--text-color);
    font-size: 0.9rem;
    font-weight: 600;
    padding: 0.3rem 1rem;
    border-radius: 50px;
    margin-bottom: 1rem;
  }

  .post-title {
    font-size: 2rem;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .post-meta {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 1.5rem;
    flex-wrap: wrap;
  }

  .post-date {
    font-size: 0.9rem;
    color: #666;
  }

  .post-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;

    .tag {
      font-size: 0.8rem;
      background-color: var(--sub-color-3);
      color: var(--text-color);
      padding: 0.2rem 0.6rem;
      border-radius: 50px;

      &:hover {
        background-color: var(--base-color);
      }
    }
  }

  .post-content {
    padding: 2rem;
    line-height: 1.8;
  }

  .post-footer {
    padding: 2rem;
    border-top: 1px solid rgba(0, 0, 0, 0.05);
  }

  .share-buttons {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;

    span {
      font-size: 0.9rem;
      font-weight: 600;
    }

    .share-button {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      background-color: var(--sub-color-2);
      border-radius: 50%;
      transition: transform 0.3s ease;

      &:hover {
        transform: translateY(-3px);
      }

      svg {
        width: 18px;
        height: 18px;
      }
    }
  }

  @media (max-width: 768px) {
    .post-header {
      padding: 1.5rem 1.5rem 1rem;
    }

    .post-title {
      font-size: 1.8rem;
    }

    .post-content {
      padding: 1.5rem;
    }

    .post-footer {
      padding: 1.5rem;
    }

    .author-box {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .post-navigation {
      grid-template-columns: 1fr;

      a {
        text-align: center;

        &.prev-post,
        &.next-post {
          text-align: center;
        }
      }
    }
  }
</style>
